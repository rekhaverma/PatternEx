import { ptrxZeppelin } from 'lib/rest/index';
import Zeppelin from 'model/classes/zeppelin.class';
import { addNotification } from 'model/actions/ui.actions';

import evpActions from '../actions';
import { getZeppelinDataFromReport, getZeppelinNoteBookReportIdId } from '../utils';

/**
 * @returns {{type: string}}
 */
const fetchVulnerabilityReportData = () => ({ 'type': evpActions.FETCH_VULNERABILITY_REPORT_DATA });
/**
 * @param data
 * @returns {{type: string, payload: *}}
 */
const setVulnerabilityReportData = data => ({ 'type': evpActions.SET_VULNERABILITY_REPORT_DATA, 'payload': data });

/**
 * @renamed: getTenableReportData
 * @param ip
 * @returns {Function}
 */
export const getVulnerabilityReportData = ip => async (dispatch) => {
  dispatch(fetchVulnerabilityReportData());
  const params = { ip };
  let payload = [];

  try {
    const notebooks = await ptrxZeppelin('/notebook');
    const tenableReportId = getZeppelinNoteBookReportIdId(notebooks.data.body, 'Tenable Report');

    if (!tenableReportId) {
      return dispatch(addNotification('error', 'Unable to get Tenable Report report.\n Please contact admin'));
    }
    const reportData = await Zeppelin.getNotebookById(tenableReportId, params);
    payload = getZeppelinDataFromReport(reportData, 2);
  } catch (error) {
    // @todo find a way to handle errors
  }

  return dispatch(setVulnerabilityReportData(payload || []));
};
