import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { FormattedMessage } from 'react-intl';
import { routerActions } from 'react-router-redux';
import { isEqual } from 'lodash';

import { locationBackUrl } from 'lib';
import AdvancedTable from 'components/advanced-table';
import { VULNERABILITY_TABLE } from 'config';
import { Button } from 'components/forms';
import SelectBox from 'components/select-box';

import { getVulnerabilityReportData } from 'model/actions/exploded-view';
import { getSeverityValues } from 'model/selectors/explodedview.selectors';

import BackTo from '../behavior/components/back-to/';
import { Search } from '../dashboard/components/search';

import './vulnerability-report-details.style.scss';

import {
  vulnerabilityReportTableConfig,
  severityFilterOptions,
} from './config';

class VulnerabilityReportDetails extends Component {
  constructor(...args) {
    super(...args);

    this.state = {
      'severityFilter': severityFilterOptions[0].content,
      'data': [],
      'searchValue': '',
      'backURL': '',
    };

    this.changeStateValue = this.changeStateValue.bind(this);
    this.handleApplyButton = this.handleApplyButton.bind(this);
    this.handleResetButton = this.handleResetButton.bind(this);
    this.handleSearch = this.handleSearch.bind(this);
  }

  componentDidMount() {
    this.props.getTenableReportData(this.props.location.query.entity_name);
    this.setState({
      'data': this.props.vulnerabilityReport,
      'backURL': locationBackUrl.getBackUrl(),
    });
  }

  componentWillReceiveProps(nextProps) {
    if (!isEqual(nextProps.vulnerabilityReport, this.props.vulnerabilityReport)) {
      this.setState({
        'data': nextProps.vulnerabilityReport,
      });
    }
  }

  changeStateValue(value) {
    this.setState({
      'severityFilter': value === this.state.severityFilter ? severityFilterOptions[0].content : value,
    });
  }

  handleApplyButton() {
    const { vulnerabilityReport } = this.props;
    const { severityFilter } = this.state;

    let filteredData = vulnerabilityReport;
    if (severityFilter !== 'Severity') {
      filteredData = vulnerabilityReport.filter((item) => {
        if (item.severity !== '' && item.severity.toLowerCase() === severityFilter) {
          return item;
        }
        return null;
      });
    }

    this.setState({
      'data': filteredData,
    });
  }

  handleResetButton() {
    this.setState({
      severityFilter: severityFilterOptions[0].content,
    }, () => {
      this.handleApplyButton();
    });
  }

  handleSearch(e) {
    this.setState({
      'searchValue': e.target.value,
    });
  }

  render() {
    const { severityFilter, searchValue, data, backURL } = this.state;
    const { severityList, vulnerabilityReport } = this.props;
    const queryParams = this.props.location.query;

    let filteredData = data;

    filteredData.forEach((item) => {
      if (!isNaN(item.plugin)) {
        /* eslint-disable */
        item.plugin = Number(item.plugin);
        /* eslint-enable */
      }
    });

    if (searchValue !== '') {
      filteredData = vulnerabilityReport.filter((item) => {
        const searchBy = searchValue.toLowerCase();

        if (item.plugin_name.toLowerCase().includes(searchBy)) {
          return item;
        }
        return null;
      });
    }

    return (
      <div className="vulnerability-report">
        <div className="vulnerability-report__header">
          <span className="vulnerability-report__title">
            <FormattedMessage id="vulnerabilityReport.title" />
          </span>
          <span className="vulnerability-report__title">
            {queryParams.entity_name}
          </span>
        </div>
        <div className="vulnerability-report__row">
          <span className="historical-behaviour__backBTNSection">
            { backURL && <BackTo
              className="backButton"
              onClick={() => this.props.updateLocation(backURL)}
              text="Back to Exploded View"
            /> }
          </span>
        </div>
        <div className="vulnerability-report__row">
          <div className="vulnerability-report__filter">
            <SelectBox
              singleSelect
              activeOption={severityFilter}
              options={severityList}
              onClick={value => this.changeStateValue(value)}
              placeholder="Severity"
            />
          </div>
          <div className="vulnerability-report__control">
            <Button
              className="button--success +small"
              onClick={this.handleApplyButton}
            >Apply
            </Button>
            <Button
              className="button--dark +small"
              onClick={this.handleResetButton}
            >Reset
            </Button>
          </div>
        </div>
        <AdvancedTable
          data={filteredData}
          tableConfig={vulnerabilityReportTableConfig}
          onRowClick={() => {}}
          pageSize="20"
          locationPage={VULNERABILITY_TABLE}
        >
          <Search
            placeholder="Search..."
            value={searchValue}
            onChange={this.handleSearch}
          />
        </AdvancedTable>
      </div>
    );
  }
}

VulnerabilityReportDetails.displayName = 'VulnerabilityReportDetails';

VulnerabilityReportDetails.propTypes = {
  'updateLocation': PropTypes.func.isRequired,
  'location': PropTypes.object,
  'vulnerabilityReport': PropTypes.array,
  'severityList': PropTypes.array,
  'getTenableReportData': PropTypes.func,
};

VulnerabilityReportDetails.defaultProps = {
  'location': {},
  'vulnerabilityReport': [],
  'severityList': [],
  'getTenableReportData': () => {},
};

const mapStateToProps = state => ({
  'vulnerabilityReport': state.raw.toJS().explodedView.vulnerabilityReport,
  'severityList': getSeverityValues(state),
});

const mapDispatchToProps = dispatch => ({
  'getTenableReportData': (...params) => dispatch(getVulnerabilityReportData(...params)),
  'updateLocation': location => dispatch(routerActions.push(location)),
});

export default connect(mapStateToProps, mapDispatchToProps)(VulnerabilityReportDetails);
